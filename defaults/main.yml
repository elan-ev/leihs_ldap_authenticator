---
# gunicorn parameters
leihs_ldap_gunicorn_bind: "127.0.0.1:8000"
leihs_ldap_gunicorn_workers: "{{ ansible_processor_vcpus }}"

# Here you can pin the version of the python package.
# Use something like: "==0.4" or ">=0.4".
# If you do not want to pin the version, just leave this empty
# (but note that pip will not update the package by itself).
leihs_ldap_authenticator_version: ""

# Below are all the config parameters from the
# leihs-ldap.yml
leihs_ldap_config:


  # Configuration related to your Leihs installation.
  leihs:
    # Public URL of your Leihs server.
    # This will be used for API access.
    url: https://leihs.example.com

    # To generate an API token:
    # - In Leihs admin, go to “Users”
    # - Select a user
    # - Click on “User-Home in leihs/my”
    # - Click on “API-Tokens”
    # - Clixk “Add API-Token”
    api_token: 00000000-1111-2222-3333-444444444444


  # Configuration related to JWT tokend received by and sent to Leihs.
  token:
    # Private key for JWT token.
    # To generate a new key, run:
    # ❯ openssl ecparam -name prime256v1 -genkey -noout -out private-key.pem
    private_key: |
      -----BEGIN PRIVATE KEY-----
      ...
      -----END PRIVATE KEY-----

    # Public key for JWT token.
    # To generate this key, run:
    # ❯ openssl ec -in private-key.pem -pubout -out public-key.pem
    public_key: |
      -----BEGIN PUBLIC KEY-----
      ...
      -----END PUBLIC KEY-----

    # How long should the issued success token be valid.
    # Shorter means more secure but also more likely to cause errors
    # in case of slow networks.
    # Value in seconds.
    validity: 120

    # Do not fail if the token received from Leihs has expired.
    # Accepting expired token is insecure!
    allow_expired: false


  # Configuration related to the authentication system registration in Leihs.
  # This service will automatically register itself on Leihs using this data.
  # Once set, the authenticator will never update the data.
  auth-system:
    # Unique identifier for this authentication system.
    # This will later bind users to this authentication method.
    id: ldap-auth

    # Name of the authenticator.
    # This will be shown on the authentication button in Leihs.
    name: LDAP Authentication

    # Description for this authentication system.
    description: null

    # Public URL to the deployed Leihs LDAP authenticator.
    # Users will be redirected here when trying to log in.
    url: http://127.0.0.1:5000

    # Priority of this authentication method.
    priority: 3

    # Regular expression matching users when they try to log in.
    # If a user logs in, but has no Leihs user yet,
    # LDAP authentication is offered if this regular expression matches.
    #
    # It often makes sense to either set this to matching email addresses
    # from specific domain names like .*@example.com
    # or to set this to .* to match all inputs.
    #
    # If this is not set, only users which have been created in Leihs before
    # and have been assigned to this authentican system can log in via LDAP.
    email_match: .*


  # Configuration related to the LDAP server.
  # - Note that only secure connections via TLS are allowed.
  # - The authenticator will try logging in with a users provided username and
  #   password and then sor for his/her own data.
  # - You can use ldapsearch to check what data is available:
  #   ❯ ldapsearch -v -H ldaps://ldap.example.com:636 \
  #       -b ou=people,dc=example,dc=com \
  #       -D uid=testuser,ou=people,dc=example,dc=com \
  #       -W '(uid=testuser)'
  ldap:
    # Rhe LDAP server address.
    server: ldap.example.com

    # TCP port the LDAP server is listening on.
    port: 636

    # Distinguished Name to bind to the LDAP directory.
    # Use {username} as placeholder for the user's username.
    user_dn: 'uid={username},ou=people,dc=example,dc=com'

    # Use base_dn as the starting point for the search.
    base_dn: 'ou=people,dc=example,dc=com'

    # Filter for user search.
    # Use {username} as placeholder for the user's username.
    search_filter: '(uid={username})'

    # Specification of user data transferred to Leihs
    userdata:
      email:
        # Use LDAP email data to overwrite the email field provided by Leihs.
        # This can be useful, for example, if you have several domains.
        overwrite: true

        # Falls back to LDAP email if no valid email is provided from Leihs.
        fallback: true

        # LDAP attribute to use as email address.
        field: mail

      name:
        # LDAP field specifying the user's family name
        family: sn

        # LDAP field specifying the user's given name
        given: givenName

      groups:
        # LDAP fields specifying groups to which new users will be assigned.
        # Group assignments will not be updated on subsequent requests.
        fields:
          - ou


  # User interface configuration.
  ui:
    directories:
      # Path to a folder containing user interface templates,
      # overriding *all* built-in templates.
      # If you use this, make sure to provide all necessary templates.
      # Missing templates can cause unrecoverable errors during the login process.
      # Example:
      #   template: /path/to/template/dir
      template: null

      # Path to a folder containing static files used in the user interface.
      # This overwrites all built-in files.
      # Example:
      #   static: /path/to/static/dir
      static: null

  # Level of details used for logging
  # Valid options are:
  #  - TRACE
  #  - DEBUG
  #  - INFO
  #  - WARNING
  #  - ERROR
  # Default: INFO
  loglevel: INFO
